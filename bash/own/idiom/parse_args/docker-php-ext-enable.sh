#!/bin/sh
set -e

usage() {
	echo "usage: $0 [options] module-name [module-name ...]"
	echo "   ie: $0 gd mysqli"
	echo "       $0 pdo pdo_mysql"
	echo "       $0 --ini-name 0-apc.ini apcu apc"
	echo
	echo 'Possible values for module-name:'
	find -maxdepth 1 \
			-type f \
			-name '*.so' \
			-exec basename '{}' ';' \
		| sort \
		| xargs
	echo
	echo 'Some of the above modules are already compiled into PHP; please check'
	echo 'the output of "php -i" to see which modules are already loaded.'
}

opts="$(getopt -o 'h?' --long 'help,ini-name:' -- "$@" || { usage >&2 && false; })"
eval set -- "$opts"

iniName=
while true; do
	flag="$1"
	shift
	case "$flag" in
		--help|-h|'-?') usage && exit 0 ;;
		--ini-name) iniName="$1" && shift ;;
		--) break ;;
		*)
			{
				echo "error: unknown flag: $flag"
				usage
			} >&2
			exit 1
			;;
	esac
done

# Q: Объясни: `getopt -o 'h?' --long 'help,ini-name:' -- "$@" || { usage >&2 && false; }`
# A: Этот фрагмент кода на bash использует утилиту getopt для обработки параметров командной строки. В данном случае, скрипт ожидает опции -h или --help и --ini-name, и их аргументы.
# Давайте разберем каждую часть этой строки:
# getopt -o 'h?':
# Это вызов getopt, который задает короткие опции. В данном случае, опции h и ? (вопросительный знак) указывают на опцию "help" (помощь). h представляет короткую форму, а ? - альтернативную короткую форму для помощи.
# --long 'help,ini-name:':
# Эта часть определяет длинные опции. help - опция для вывода справочной информации, ini-name: - опция, которая ожидает аргумент (значение).
# -- "$@":
# Передает все аргументы командной строки в getopt. "$@" представляет собой список всех аргументов.
# || { usage >&2 && false; }:
# Эта часть выполняется в случае ошибки при обработке опций getopt. Если возвращается неуспешный код завершения, то вызывается функция usage для вывода справочной информации и возвращается ложное значение (с использованием false), чтобы завершить выполнение скрипта.

# Q: Объясни: `eval set -- "$options"`
# A: eval set -- "$options" - это команда, которая используется для установки аргументов командной строки в скрипте на основе результата, полученного с помощью getopt. Давайте разберем, как это работает:
# "$options":
# Переменная $options содержит результат, возвращаемый getopt. Этот результат представляет собой отформатированную строку с опциями и их аргументами, которые были переданы в команду.
# set -- "$options":
# Команда set используется для установки значений параметров командной строки (переменных $1, $2, и так далее). В данном случае, -- указывает на конец опций и начало значений параметров командной строки.
# eval:
# eval выполняет команду, формируемую из своего аргумента, как если бы она была введена с клавиатуры. В данном контексте eval используется для выполнения команды set с опциями, которые были получены из getopt.
# Таким образом, eval set -- "$options" выполняет установку параметров командной строки на основе опций, полученных с помощью getopt. После выполнения этой команды переменные $1, $2, и так далее будут содержать значения опций и их аргументов, готовые для обработки в цикле обработки опций в скрипте.

# Q: Чем вызов: eval set -- "$options" отличается от вызова: set -- "$options"
# A: Различие между eval set -- "$options" и set -- "$options" заключается в том, как обрабатываются специальные символы, такие как пробелы и символы новой строки, в переменной $options.
# eval set -- "$options":
# eval выполняет команду, формируемую из своего аргумента, как если бы она была введена с клавиатуры. В данном случае, eval позволяет интерпретировать и выполнять специальные символы в строке $options. Если в $options есть пробелы или символы новой строки, eval обеспечивает их корректную интерпретацию.
# set -- "$options":
# set используется для установки значений параметров командной строки, но в этом случае, она не предоставляет дополнительной интерпретации для специальных символов в $options. Если в $options содержатся пробелы или символы новой строки, они будут рассматриваться как часть одного аргумента.
# Таким образом, использование eval может быть полезным, если в $options содержатся специальные символы, которые необходимо интерпретировать корректно при установке параметров командной строки. Однако, использование eval требует осторожности, так как она может привести к нежелательному выполнению кода, если $options содержит команды или выражения, которые не являются безопасными.


