// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package model

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type newsCategoryViewType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *newsCategoryViewType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("NewsCategories").
func (v *newsCategoryViewType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *newsCategoryViewType) Columns() []string {
	return []string{
		"NewsId",
		"CategoryId",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *newsCategoryViewType) NewStruct() reform.Struct {
	return new(NewsCategory)
}

// NewsCategoryView represents NewsCategories view or table in SQL database.
var NewsCategoryView = &newsCategoryViewType{
	s: parse.StructInfo{
		Type:    "NewsCategory",
		SQLName: "NewsCategories",
		Fields: []parse.FieldInfo{
			{Name: "NewsID", Type: "int64", Column: "NewsId"},
			{Name: "CategoryID", Type: "int64", Column: "CategoryId"},
		},
		PKFieldIndex: -1,
	},
	z: new(NewsCategory).Values(),
}

// String returns a string representation of this struct or record.
func (s NewsCategory) String() string {
	res := make([]string, 2)
	res[0] = "NewsID: " + reform.Inspect(s.NewsID, true)
	res[1] = "CategoryID: " + reform.Inspect(s.CategoryID, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *NewsCategory) Values() []interface{} {
	return []interface{}{
		s.NewsID,
		s.CategoryID,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *NewsCategory) Pointers() []interface{} {
	return []interface{}{
		&s.NewsID,
		&s.CategoryID,
	}
}

// View returns View object for that struct.
func (s *NewsCategory) View() reform.View {
	return NewsCategoryView
}

// check interfaces
var (
	_ reform.View   = NewsCategoryView
	_ reform.Struct = (*NewsCategory)(nil)
	_ fmt.Stringer  = (*NewsCategory)(nil)
)

func init() {
	parse.AssertUpToDate(&NewsCategoryView.s, new(NewsCategory))
}
