// Code generated by go-swagger; DO NOT EDIT.

package article

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateArticleWithFormMaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var UpdateArticleWithFormMaxParseMemory int64 = 32 << 20

// NewUpdateArticleWithFormParams creates a new UpdateArticleWithFormParams object
//
// There are no default values defined in the spec.
func NewUpdateArticleWithFormParams() UpdateArticleWithFormParams {

	return UpdateArticleWithFormParams{}
}

// UpdateArticleWithFormParams contains all the bound params for the update article with form operation
// typically these are obtained from a http.Request
//
// swagger:parameters updateArticleWithForm
type UpdateArticleWithFormParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*ID of article that needs to be updated
	  Required: true
	  In: path
	*/
	ArticleID int64
	/*Updated content of the article
	  In: formData
	*/
	Content *string
	/*Updated name of the article
	  In: formData
	*/
	Name *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewUpdateArticleWithFormParams() beforehand.
func (o *UpdateArticleWithFormParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(UpdateArticleWithFormMaxParseMemory); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	rArticleID, rhkArticleID, _ := route.Params.GetOK("articleId")
	if err := o.bindArticleID(rArticleID, rhkArticleID, route.Formats); err != nil {
		res = append(res, err)
	}

	fdContent, fdhkContent, _ := fds.GetOK("content")
	if err := o.bindContent(fdContent, fdhkContent, route.Formats); err != nil {
		res = append(res, err)
	}

	fdName, fdhkName, _ := fds.GetOK("name")
	if err := o.bindName(fdName, fdhkName, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindArticleID binds and validates parameter ArticleID from path.
func (o *UpdateArticleWithFormParams) bindArticleID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("articleId", "path", "int64", raw)
	}
	o.ArticleID = value

	return nil
}

// bindContent binds and validates parameter Content from formData.
func (o *UpdateArticleWithFormParams) bindContent(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Content = &raw

	return nil
}

// bindName binds and validates parameter Name from formData.
func (o *UpdateArticleWithFormParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Name = &raw

	return nil
}
