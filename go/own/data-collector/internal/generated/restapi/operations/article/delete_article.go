// Code generated by go-swagger; DO NOT EDIT.

package article

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteArticleHandlerFunc turns a function with the right signature into a delete article handler
type DeleteArticleHandlerFunc func(DeleteArticleParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteArticleHandlerFunc) Handle(params DeleteArticleParams) middleware.Responder {
	return fn(params)
}

// DeleteArticleHandler interface for that can handle valid delete article params
type DeleteArticleHandler interface {
	Handle(DeleteArticleParams) middleware.Responder
}

// NewDeleteArticle creates a new http.Handler for the delete article operation
func NewDeleteArticle(ctx *middleware.Context, handler DeleteArticleHandler) *DeleteArticle {
	return &DeleteArticle{Context: ctx, Handler: handler}
}

/*
	DeleteArticle swagger:route DELETE /article/{articleId} article deleteArticle

Deletes an article
*/
type DeleteArticle struct {
	Context *middleware.Context
	Handler DeleteArticleHandler
}

func (o *DeleteArticle) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteArticleParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
