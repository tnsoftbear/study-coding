// Code generated by go-swagger; DO NOT EDIT.

package article

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewFindArticlesByIdsParams creates a new FindArticlesByIdsParams object
//
// There are no default values defined in the spec.
func NewFindArticlesByIdsParams() FindArticlesByIdsParams {

	return FindArticlesByIdsParams{}
}

// FindArticlesByIdsParams contains all the bound params for the find articles by ids operation
// typically these are obtained from a http.Request
//
// swagger:parameters findArticlesByIds
type FindArticlesByIdsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Article ID values that need to be considered for filter
	  Required: true
	  In: query
	  Collection Format: multi
	*/
	Ids []int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewFindArticlesByIdsParams() beforehand.
func (o *FindArticlesByIdsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qIds, qhkIds, _ := qs.GetOK("ids")
	if err := o.bindIds(qIds, qhkIds, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindIds binds and validates array parameter Ids from query.
//
// Arrays are parsed according to CollectionFormat: "multi" (defaults to "csv" when empty).
func (o *FindArticlesByIdsParams) bindIds(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("ids", "query", rawData)
	}
	// CollectionFormat: multi
	idsIC := rawData
	if len(idsIC) == 0 {
		return errors.Required("ids", "query", idsIC)
	}

	var idsIR []int64
	for i, idsIV := range idsIC {
		idsI, err := swag.ConvertInt64(idsIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "ids", i), "query", "int64", idsI)
		}

		idsIR = append(idsIR, idsI)
	}

	o.Ids = idsIR

	return nil
}
