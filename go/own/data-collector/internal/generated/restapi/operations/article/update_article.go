// Code generated by go-swagger; DO NOT EDIT.

package article

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateArticleHandlerFunc turns a function with the right signature into a update article handler
type UpdateArticleHandlerFunc func(UpdateArticleParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateArticleHandlerFunc) Handle(params UpdateArticleParams) middleware.Responder {
	return fn(params)
}

// UpdateArticleHandler interface for that can handle valid update article params
type UpdateArticleHandler interface {
	Handle(UpdateArticleParams) middleware.Responder
}

// NewUpdateArticle creates a new http.Handler for the update article operation
func NewUpdateArticle(ctx *middleware.Context, handler UpdateArticleHandler) *UpdateArticle {
	return &UpdateArticle{Context: ctx, Handler: handler}
}

/*
	UpdateArticle swagger:route PUT /articles article updateArticle

Update an existing article
*/
type UpdateArticle struct {
	Context *middleware.Context
	Handler UpdateArticleHandler
}

func (o *UpdateArticle) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateArticleParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
