// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https",
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Article collector",
    "version": "0.0.1"
  },
  "basePath": "/v1",
  "paths": {
    "/article/{articleId}": {
      "get": {
        "description": "Returns a single article",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "tags": [
          "article"
        ],
        "summary": "Find article by ID",
        "operationId": "getArticleById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of article to return",
            "name": "articleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Article"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        }
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "tags": [
          "article"
        ],
        "summary": "Updates an article with form data",
        "operationId": "updateArticleWithForm",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of article that needs to be updated",
            "name": "articleId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Updated name of the article",
            "name": "name",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Updated content of the article",
            "name": "content",
            "in": "formData"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "tags": [
          "article"
        ],
        "summary": "Deletes an article",
        "operationId": "deleteArticle",
        "parameters": [
          {
            "type": "string",
            "name": "api_key",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Article id to delete",
            "name": "articleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Article not found"
          }
        }
      }
    },
    "/articles": {
      "put": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "tags": [
          "article"
        ],
        "summary": "Update an existing article",
        "operationId": "updateArticle",
        "parameters": [
          {
            "description": "Article object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Article"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Article not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "tags": [
          "article"
        ],
        "summary": "Add a new article",
        "operationId": "addArticle",
        "parameters": [
          {
            "description": "Article object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Article"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/articles/findByIds": {
      "get": {
        "description": "Multiple article IDs can be provided with comma separated strings",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "tags": [
          "article"
        ],
        "summary": "Finds articles by their IDs",
        "operationId": "findArticlesByIds",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "description": "Article ID values that need to be considered for filter",
            "name": "ids",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Article"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    }
  },
  "definitions": {
    "Article": {
      "type": "object",
      "properties": {
        "author": {
          "$ref": "#/definitions/Author"
        },
        "content": {
          "type": "string",
          "example": ""
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": ""
        }
      },
      "xml": {
        "name": "Author"
      }
    },
    "Author": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Author"
      }
    }
  },
  "tags": [
    {
      "description": "Post, news, article, any content",
      "name": "article"
    },
    {
      "description": "Article author",
      "name": "author"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https",
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Article collector",
    "version": "0.0.1"
  },
  "basePath": "/v1",
  "paths": {
    "/article/{articleId}": {
      "get": {
        "description": "Returns a single article",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "tags": [
          "article"
        ],
        "summary": "Find article by ID",
        "operationId": "getArticleById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of article to return",
            "name": "articleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Article"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        }
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "tags": [
          "article"
        ],
        "summary": "Updates an article with form data",
        "operationId": "updateArticleWithForm",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of article that needs to be updated",
            "name": "articleId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Updated name of the article",
            "name": "name",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Updated content of the article",
            "name": "content",
            "in": "formData"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "produces": [
          "application/json",
          "application/xml"
        ],
        "tags": [
          "article"
        ],
        "summary": "Deletes an article",
        "operationId": "deleteArticle",
        "parameters": [
          {
            "type": "string",
            "name": "api_key",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Article id to delete",
            "name": "articleId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Article not found"
          }
        }
      }
    },
    "/articles": {
      "put": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "tags": [
          "article"
        ],
        "summary": "Update an existing article",
        "operationId": "updateArticle",
        "parameters": [
          {
            "description": "Article object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Article"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Article not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "tags": [
          "article"
        ],
        "summary": "Add a new article",
        "operationId": "addArticle",
        "parameters": [
          {
            "description": "Article object that needs to be added",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Article"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/articles/findByIds": {
      "get": {
        "description": "Multiple article IDs can be provided with comma separated strings",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "tags": [
          "article"
        ],
        "summary": "Finds articles by their IDs",
        "operationId": "findArticlesByIds",
        "parameters": [
          {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "description": "Article ID values that need to be considered for filter",
            "name": "ids",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Article"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    }
  },
  "definitions": {
    "Article": {
      "type": "object",
      "properties": {
        "author": {
          "$ref": "#/definitions/Author"
        },
        "content": {
          "type": "string",
          "example": ""
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": ""
        }
      },
      "xml": {
        "name": "Author"
      }
    },
    "Author": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Author"
      }
    }
  },
  "tags": [
    {
      "description": "Post, news, article, any content",
      "name": "article"
    },
    {
      "description": "Article author",
      "name": "author"
    }
  ]
}`))
}
