#include <iostream>
#include <span>

void printNumbers(std::span<int> numbers) {
  for (int num : numbers) {
    std::cout << num << " ";
  }
  std::cout << std::endl;
}

int main() {
  int arr[] = {1, 2, 3, 4, 5};
  std::span<int> numbers(arr, 5);

  printNumbers(numbers);

  // Можно также создавать span из стандартных контейнеров, указателей и т. д.
  // std::vector<int> vec = {1, 2, 3};
  // std::span<int> spanFromVector(vec);

  return 0;
}

/**
g++ -std=c++20 std_span_2.cpp && ./a.out
https://en.cppreference.com/w/cpp/container/span

`std::span` - это шаблонный класс, введенный в C++20, предоставляющий простой интерфейс для представления участка
(или диапазона) последовательных элементов в памяти без владения этими элементами.
Он служит абстракцией для работы с массивами и другими контейнерами без копирования данных.

Основные аспекты `std::span`:

1. **Указатель и Размер:**
   - `std::span` хранит указатель на начало участка и его размер.
   - Имеется возможность работать как с нуль-терминированными массивами, так и с обычными.

2. **Итераторы:**
   - Поддерживает итерацию через элементы участка, используя итераторы.

3. **Без Владения Данными:**
   - Не владеет данными, которые он представляет. Не управляет их жизненным циклом.

4. **Безопасность:**
   - При использовании `std::span`, вы можете избежать неявных аллокаций памяти и копирования данных.

Здесь `std::span` передается в функцию `printNumbers`, которая выводит числа из этого участка.
Это удобный способ передавать и работать с участками данных без явного копирования или выделения новой памяти.
*/
